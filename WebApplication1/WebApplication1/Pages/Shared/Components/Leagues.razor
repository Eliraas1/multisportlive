@using Newtonsoft.Json;
@using Components;
<h3>Leagues</h3>



<div id="soccer" class="container tab-pane active">
    <br>
    <div class="container-fluid">
        <div class="row">
            @foreach (var index in leaguesLogo)
            {
                <!-- Button trigger modal -->
                <button class="btn d-flex col-md-4 col-lg-3 justify-content-center align-content-center shadow-none align-items-center" data-bs-toggle="modal" data-bs-target="#@index.Key">
                    @*<figure class="rounded-circle flex-column justify-content-center align-content-center" style="text-align: center">*@
                        <img src=@index.Value style="object-fit:scale-down; width:60%">
                        @*<figcaption>@index.Key</figcaption>*@
                    @*</figure>*@
                </button>
            }
        </div>
    </div>
</div>

@foreach (var league in Soccer)
{
    <div class="modal fade" id="@league.Key" tabindex="-1" aria-labelledby="PLLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="container">
                <div class="table-responsive">
                    <table class="table shadow rounded">
                        <thead>
                            <tr>
                                <th scope="col">Team</th>
                                <th scope="col"></th>
                                <th scope="col">Played</th>
                                <th scope="col">Won</th>
                                <th scope="col">Drawn</th>
                                <th scope="col">Lost</th>
                                <th scope="col">Points</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (league.Value != null)
                            {

                                foreach (var stat in league.Value)
                                {
                            <tr>
                                @* stat.team.logo *@
                                <td>@stat.position. <img src="@stat.team.logo" style="object-fit:contain; width:75%" /></td>
                                <td>@stat.team.name</td>
                                <td>@stat.fields.matches_total</td>
                                <td>@stat.fields.wins_total</td>
                                <td>@stat.fields.draws_total</td>
                                <td>@stat.fields.losses_total</td>
                                <td>@stat.fields.points_total</td>
                            </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}

@foreach (var league in Basketball)
{
    <div class="modal fade" id="@league.Key" tabindex="-1" aria-labelledby="PLLabel" aria-hidden="true">
        <div class="modal-dialog">

            <div class="container">
                <div class="table-responsive">
                    <table class="table shadow rounded">
                        <thead>
                            <tr>
                                <th scope="col">Team</th>
                                <th scope="col"></th>
                                <th scope="col">Games</th>
                                <th scope="col">W</th>
                                <th scope="col">L</th>
                                @*<th scope="col">Points</th>*@


                            </tr>
                        </thead>
                        <tbody>
                            @if (league.Value != null)
                            {

                                foreach (var stat in league.Value)
                                {
                                    <tr>
                                        

                                        <td>@stat.position. <img src="@stat.team.logo" style="object-fit:contain; width:65%" /></td>
                                        <td>@stat.team.name</td>
                                        <td>@stat.fields.matches_total</td>
                                        <td>@stat.fields.wins_total</td>
                                        <td>@stat.fields.losses_total</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}


                                        @code {

                            public Dictionary<string, string> leaguesLogo = new Dictionary<string, string>();
                                public Dictionary<string, string> leaguesID = new Dictionary<string, string>();
                                public dynamic PL = new List<dynamic>();
                                public dynamic BundesLig = new List<dynamic>();
                                public dynamic IsraelFootball = new List<dynamic>();
                                public dynamic Laliga = new List<dynamic>();
                                public dynamic IsraelBasketball = new List<dynamic>();
                                public dynamic Euroleague = new List<dynamic>();
                                public dynamic NBA = new List<dynamic>();
                                public dynamic SeriaA = new List<dynamic>();

                                public Dictionary<string, dynamic> Soccer = new Dictionary<string, dynamic>();
                                public Dictionary<string, dynamic> Basketball = new Dictionary<string, dynamic>();


                                void initializeLogos()
                                {
                                    leaguesLogo.Add("PL", "https://seeklogo.com/images/P/premier-league-new-logo-D22A0CE87E-seeklogo.com.png");
                                    leaguesLogo.Add("BundesLig", "https://upload.wikimedia.org/wikipedia/en/d/df/Bundesliga_logo_%282017%29.svg");
                                    leaguesLogo.Add("SeriaA", "https://brandlogos.net/wp-content/uploads/2021/12/serie_a-brandlogo.net_.png");
                                    //leaguesLogo.Add("League1", "https://upload.wikimedia.org/wikipedia/commons/thumb/5/5e/Ligue1.svg/1200px-Ligue1.svg.png");
                                    leaguesLogo.Add("IsraelFootball", "https://upload.wikimedia.org/wikipedia/en/c/c4/Israeli_Premier_League.png");
                                    leaguesLogo.Add("Laliga", "https://seeklogo.com/images/L/la-liga-santander-logo-00EC23E99E-seeklogo.com.png");
                                    leaguesLogo.Add("IsraelBasketball", "https://www.uleb.com/images/leagues/logo/11/israel-basketball-super-league.jpg?t=1643827081");
                                    leaguesLogo.Add("Euroleague", "https://seeklogo.com/images/E/euroleague-basketball-logo-9E494F0A2C-seeklogo.com.png");
                                    leaguesLogo.Add("NBA", "https://seeklogo.com/images/N/nba-logo-20AFA6E832-seeklogo.com.png");

                                }

                                void initializeID()
                                {
                                    leaguesID.Add("PL", "11320");
                                    leaguesID.Add("BundesLig", "9038");
                                    leaguesID.Add("IsraelFootball", "9170");
                                    leaguesID.Add("Laliga", "9080");
                                    leaguesID.Add("IsraelBasketball", "11328");
                                    leaguesID.Add("Euroleague", "9300");
                                    leaguesID.Add("NBA", "10345");
                                    leaguesID.Add("SeriaA", "9299");

                                }

                                public List<dynamic> Sort(dynamic input)
                                {
                                    List<dynamic> temp = new List<dynamic>();
                                    int size = input.Count;
                                    int i = 1;

                                    while (i < (size + 1))
                                    {
                                        foreach (var item in input)
                                        {
                                            int position = item.position;
                                            if (position == i)
                                            {
                                                temp.Add(item);
                                                i++;
                                                continue;
                                            }
                                        }
                                    }
                                    return temp;
                                }

                                async Task initializeLeagues()
                                {
                                    PL = await GetLeague("8960");
                                    SeriaA = await GetLeague("9299");
                                    BundesLig = await GetLeague("9038");
                                    IsraelFootball = await GetLeague("9170");
                                    System.Threading.Thread.Sleep(1000);
                                    Laliga = await GetLeague("9080");
                                    IsraelBasketball = await GetLeague("11328");
                                    Euroleague = await GetLeague("9300");
                                    NBA = await GetLeague("10345");

                                    Soccer.Add("PL", PL);
                                    Soccer.Add("SeriaA", SeriaA);
                                    Soccer.Add("BundesLig", BundesLig);
                                    Soccer.Add("IsraelFootball", IsraelFootball);
                                    Soccer.Add("Laliga", Laliga);
                                    Basketball.Add("IsraelBasketball", IsraelBasketball);
                                    Basketball.Add("Euroleague", Euroleague);
                                    Basketball.Add("NBA", NBA);

                                }


                                protected override async Task OnInitializedAsync()
                                {
                                    initializeLogos();
                                    initializeID();
                                    await initializeLeagues();
                                }

                                public async Task<List<dynamic>> GetLeague(dynamic id)
                                {
                                    dynamic res = null;
                                    string uri = "https://sportscore1.p.rapidapi.com/seasons/" + id + "/standings-tables";

                                    var client = new HttpClient();
                                    var request = new HttpRequestMessage
                                    {
                                        Method = HttpMethod.Get,
                                        RequestUri = new Uri(uri),
                                        Headers =
{
        { "X-RapidAPI-Host", "sportscore1.p.rapidapi.com" },
        { "X-RapidAPI-Key",WebApplication1.Model.Global.API_KEY },
    },
                                    };
                                    using (var response = await client.SendAsync(request))
                                    {
                                        response.EnsureSuccessStatusCode();
                                        var body = await response.Content.ReadAsStringAsync();
                                        res = JsonConvert.DeserializeObject(body);


                                    }
                                    return Sort(res.data[0].standings_rows);
                                }
                                        }
